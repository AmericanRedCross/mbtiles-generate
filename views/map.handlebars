<script src="//ajax.aspnetcdn.com/ajax/jquery.validate/1.13.1/jquery.validate.min.js"></script>
<script src="//cdn.datatables.net/1.10.7/js/jquery.dataTables.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0-alpha.2/handlebars.min.js"></script>
<script src="/js/tiles.js"></script>

{{#if error}}
	<div class="alert alert-danger alert-dismissable">
		  <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
		  <p><strong>Sorry, we've hit a snag.</strong> <em>{{error}}</em></p>
	</div>
{{/if}}
<div class="row">
	<div id="map" style="position:absolute; bottom:0; top:0; right:0;">
		<div id="map-area-instructions">
			<div id="select-area-button" class="btn btn-default btn-md disabled">Select Area</div>
			<p id="instructions">Zoom in to where you want to map.</p>
		</div>
		<div id="request-mbtiles">
			<div class="form-group">
				<label for="exampleInputEmail1">Name this area:</label>
				<div class="input-group">
		    	<input type="text" class="form-control" id="file-name" placeholder="area-name">
					<div class="input-group-addon">.mbtiles</div>
				</div>
				<label class="input-warning" for="exampleInputEmail1">*No spaces or special characters.*</label>
		  </div>
			<div id="generate-mbtiles" class="btn btn-success btn-md disabled">Generate MBTiles</div>
		</div>
	</div>
</div>
<script src='https://api.tiles.mapbox.com/mapbox.js/v2.2.1/mapbox.js'></script>
<link href='https://api.tiles.mapbox.com/mapbox.js/v2.2.1/mapbox.css' rel='stylesheet' />
<script>

var areaNW = undefined,
    areaSE = undefined,
		box = undefined,
		selectable = false,
    validRequestExists = false,
		fileName = undefined,
		bounds = undefined,
		extent = { 'north': 0, 'south': 0, 'east': 0, 'west': 0 },
		request = { fileName: undefined, bounds: undefined };

function sizeMap() {
	$("#map").css("left", function() {
		return $(window).width() >= 1025 ? "25%" : "0";
	})
}
$(window).resize(function(){
	sizeMap();
});
sizeMap();


// Provide your access token
L.mapbox.accessToken = 'pk.eyJ1IjoiYWFyb25kZW5uaXMiLCJhIjoiem5LLURoYyJ9.T3tswGTI5ve8_wE-a02cMw';
// Create a map in the div #map
var map = L.mapbox.map('map', 'aarondennis.humanitarian', {
						zoomControl: false
					}).addControl(
						L.mapbox.geocoderControl('mapbox.places', {
      				autocomplete: true,
							position: 'topright'
						})
					).setView([0, 0], 2);;

// Change zoom control location
new L.Control.Zoom({ position: 'topright' }).addTo(map);

map.on('zoomend', function() {
	selectable = map.getZoom() >= 12 ? true : false;

	if(selectable) {
		$('#map-area-instructions').css('background-color', 'rgba(200,255,200,0.8)')
		$('#instructions').text('Click above to select an area.');
		$('#select-area-button').removeClass('disabled').text('Select Area');

		$('#select-area-button').on('click', startDrawing);

	} else {
		$('#map-area-instructions').css('background-color', 'rgba(255,200,200,0.8)')
		$('#instructions').css('display', 'block').text('Zoom in to where you want to map.');
		$('#select-area-button').addClass('disabled');
	}

});

function startDrawing() {

	$('#instructions').css('display', 'block').text('Click and drag to select where you want to map.');

	// Disable drag and zoom handlers.
	map.dragging.disable();
	map.touchZoom.disable();
	map.doubleClickZoom.disable();
	map.scrollWheelZoom.disable();

	// Disable tap handler, if present.
	if (map.tap) map.tap.disable();

	$('#map').css('cursor', 'crosshair');

	map.on('mousedown', draw);

}


function draw(e) {

	start = [e.latlng['lat'], e.latlng['lng']];

	bounds = [start, start]
	selectArea(bounds);
	map.on('mousemove', dragRectangle);

	map.on('mouseup', finishDraw);
	map.on('mouseup', defaultCursor);

}

function finishDraw(e) {

	map.off('mousedown', draw);
	map.off('mousemove', dragRectangle);
	map.off('mouseup', finishDraw);
	$('#request-mbtiles').css('display', 'block');

	$('#map').css('cursor', 'default');

	map.panTo([(bounds[0][0] + bounds[1][0]) / 2, (bounds[0][1] + bounds[1][1]) / 2]);

	$('#select-area-button').text('Select a Different Area');
	$('#instructions').text('Name this area below or click above to select a different area.');
	$('#select-area-button').unbind('click', startDrawing);
	$('#select-area-button').on('click', restart);

};

function dragRectangle(e) {

	end = [e.latlng['lat'], e.latlng['lng']];

	bounds = [start, end]
	selectArea(bounds);

	console.log(numberOfTiles(bounds, 12, 19));

}

function selectArea(bounds) {

	// create a rectangle
	if (box) { map.removeLayer(box); }
	box = L.rectangle(bounds, {
		color: "#ed1b2e",
		fillOpacity: 0.2,
		weight: 2,
		clickable: false
	});
	box.addTo(map);
}

function restart() {

	// Disable drag and zoom handlers.
	map.dragging.enable();
	map.touchZoom.enable();
	map.doubleClickZoom.enable();
	map.scrollWheelZoom.enable();

	// Disable tap handler, if present.
	if (map.tap) map.tap.enable();

	$('#request-mbtiles').css('display', 'none');

	map.removeLayer(box);

	$('#select-area-button').unbind('click', restart);

	map.zoomOut();

	$('#map').css('cursor', 'drag');
	$('#map').on('mousedown', grabbingCursor);
	$('#map').on('mouseup', dragCursor);

}

function dragCursor() { $('#map').css('cursor', 'drag'); };
function grabbingCursor() { $('#map').css('cursor', 'grabbing'); };
function defaultCursor() { $('#map').css('cursor', 'default'); };

$('#file-name').keyup(function(){
	fileName = $('#file-name').val();

	var pattern = /^[a-zA-Z0-9-_]*$/
	var valid = pattern.test(fileName) && fileName !== '';

	if(valid) {
		validRequestExists = true;
		$('#generate-mbtiles').removeClass('disabled');

		$('#generate-mbtiles').off().on('click', requestMBTiles);

	} else if (validRequestExists) {
		validRequestExists = false;
		$('#generate-mbtiles').addClass('disabled');

		$('#generate-mbtiles').off('click', requestMBTiles);

	}

});

function requestMBTiles() {

	request.fileName = fileName;
	request.bounds = bounds;

	$.post('/map', request, function(data) {

	});

}

function numberOfTiles(bounds, minZoom, maxZoom) {

	extent['north'] = bounds[0][0] > bounds[1][0] ? bounds[0][0] : bounds[1][0],
	extent['south'] = bounds[0][0] < bounds[1][0] ? bounds[0][0] : bounds[1][0],
	extent['east']  = bounds[0][1] > bounds[1][1] ? bounds[0][1] : bounds[1][1],
	extent['west']  = bounds[0][1] < bounds[1][1] ? bounds[0][1] : bounds[1][1];

	var total = 0;

	for (var i = minZoom; i <= maxZoom; i++) {

		total += (
				( Math.ceil(((extent['east'] + 180) / 360) * Math.pow(2, i)) -
				  Math.floor(((extent['west'] + 180) / 360) * Math.pow(2, i)) )
				  *
				( Math.ceil(((extent['north'] + 180) / 360) * Math.pow(2, i)) -
				  Math.floor(((extent['south'] + 180) / 360) * Math.pow(2, i)) )
		);
	}

	return total;

}

</script>
